{"ast":null,"code":"// import axios from \"axios\";\n// import './App.css';\n// import \"bootstrap/dist/css/bootstrap.min.css\"\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n\n//   const apiKey = \"5fa957a6cbd2c5e398e28868eded2766\"\n//   const [inputCity, setInputCity] = useState(\"\")\n//   const [data, setData] = useState({})\n\n//   const getWetherDetails = (cityName) => {\n//     if (!cityName) return\n//     const apiURL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + cityName + \"&appid=\" + apiKey\n//     axios.get(apiURL).then((res) => {\n//       console.log(\"response\", res.data)\n//       setData(res.data)\n//     }).catch((err) => {\n//       console.log(\"err\", err)\n//     })\n//   }\n\n//   const handleChangeInput = (e) => {\n//     console.log(\"value\", e.target.value)\n//     setInputCity(e.target.value)\n//   }\n\n//   const handleSearch = () => {\n//     getWetherDetails(inputCity)\n//   }\n\n//   const getWindDirection = (degrees) => {\n//     const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n//     const index = Math.round(degrees / 45) % 8;\n//     return directions[index];\n// }\n\n//   return (\n//     <div className=\"col-md-12\">\n//     <div className=\"wetherBg\">\n//       <h1 className=\"heading\">Weather App</h1>\n\n//       <div className=\"d-grid gap-3 col-4 mt-4\">\n//         <input type=\"text\" className=\"form-control\"\n//           value={inputCity}\n//           onChange={handleChangeInput} />\n//         <button className=\"btn btn-primary\" type=\"button\"\n//           onClick={handleSearch}\n//         >Search</button>\n//       </div>\n//     </div>\n\n//     {Object.keys(data).length > 0 &&\n//       <div className=\"col-md-12 text-center mt-5\">\n\n//         <div className=\"shadow rounded wetherResultBox\">\n//           <img className=\"weathorIcon\"\n//             src=\"https://i.pinimg.com/originals/77/0b/80/770b805d5c99c7931366c2e84e88f251.png\" />\n\n//           <h5 className=\"weathorCity\">\n//             {data?.name}\n//           </h5>\n//           <h6 className=\"weathorTemp\">{((data?.main?.temp) - 273.15).toFixed(2)}°C</h6>\n\n//           <h3 className=\"\">Max Tem {((data?.main?.temp_max) - 273.15).toFixed(2)}°C & Min Tem {((data?.main?.temp_min) - 273.15).toFixed(2)}°C </h3>\n//           <h3 className=\"\"> Humidity: {((data?.main?.humidity) )} % </h3>\n//           {/* <h3 className=\"\"> Wind Speed: {((data?.wind?.speed) )} m/s </h3> */}\n//          <h3> Wind: {data?.wind?.speed} m/s {getWindDirection(data?.wind?.deg)}</h3>\n//           <h3 className=\"\">Description: {data?.weather[0]?.description ?? 'N/A'} </h3>\n\n//         </div>\n//       </div>\n//     }\n\n// {forecast.length > 0 && (\n//         <div className=\"col-md-12 text-center mt-5\">\n//           <h2>5-Day Forecast</h2>\n//           <div className=\"row\">\n//             {forecast.slice(0, 5).map((forecastItem, index) => (\n//               <div className=\"col-md-2\" key={index}>\n//                 <div className=\"shadow rounded weatherResultBox\">\n//                   <h6>{forecastItem?.dt_txt}</h6>\n//                   <p>\n//                     Temp:{\" \"}\n//                     {(forecastItem?.main?.temp - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>\n//                     Max Temp:{\" \"}\n//                     {(forecastItem?.main?.temp_max - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>\n//                     Min Temp:{\" \"}\n//                     {(forecastItem?.main?.temp_min - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>Humidity: {forecastItem?.main?.humidity} %</p>\n//                   <p>\n//                     Wind: {forecastItem?.wind?.speed} m/s{\" \"}\n//                     {getWindDirection(forecastItem?.wind?.deg)}\n//                   </p>\n//                   <p>\n//                     Description: {forecastItem?.weather[0]?.description ?? \"N/A\"}\n//                   </p>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//   </div>\n\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/ankush/Desktop/weather-app/src/App.js"],"sourcesContent":["// import axios from \"axios\";\n// import './App.css';\n// import \"bootstrap/dist/css/bootstrap.min.css\"\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n\n//   const apiKey = \"5fa957a6cbd2c5e398e28868eded2766\"\n//   const [inputCity, setInputCity] = useState(\"\")\n//   const [data, setData] = useState({})\n\n\n\n//   const getWetherDetails = (cityName) => {\n//     if (!cityName) return\n//     const apiURL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + cityName + \"&appid=\" + apiKey\n//     axios.get(apiURL).then((res) => {\n//       console.log(\"response\", res.data)\n//       setData(res.data)\n//     }).catch((err) => {\n//       console.log(\"err\", err)\n//     })\n//   }\n\n//   const handleChangeInput = (e) => {\n//     console.log(\"value\", e.target.value)\n//     setInputCity(e.target.value)\n//   }\n\n//   const handleSearch = () => {\n//     getWetherDetails(inputCity)\n//   }\n\n//   const getWindDirection = (degrees) => {\n//     const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n//     const index = Math.round(degrees / 45) % 8;\n//     return directions[index];\n// }\n\n\n//   return (\n//     <div className=\"col-md-12\">\n//     <div className=\"wetherBg\">\n//       <h1 className=\"heading\">Weather App</h1>\n\n//       <div className=\"d-grid gap-3 col-4 mt-4\">\n//         <input type=\"text\" className=\"form-control\"\n//           value={inputCity}\n//           onChange={handleChangeInput} />\n//         <button className=\"btn btn-primary\" type=\"button\"\n//           onClick={handleSearch}\n//         >Search</button>\n//       </div>\n//     </div>\n\n//     {Object.keys(data).length > 0 &&\n//       <div className=\"col-md-12 text-center mt-5\">\n\n//         <div className=\"shadow rounded wetherResultBox\">\n//           <img className=\"weathorIcon\"\n//             src=\"https://i.pinimg.com/originals/77/0b/80/770b805d5c99c7931366c2e84e88f251.png\" />\n\n//           <h5 className=\"weathorCity\">\n//             {data?.name}\n//           </h5>\n//           <h6 className=\"weathorTemp\">{((data?.main?.temp) - 273.15).toFixed(2)}°C</h6>\n          \n//           <h3 className=\"\">Max Tem {((data?.main?.temp_max) - 273.15).toFixed(2)}°C & Min Tem {((data?.main?.temp_min) - 273.15).toFixed(2)}°C </h3>\n//           <h3 className=\"\"> Humidity: {((data?.main?.humidity) )} % </h3>\n//           {/* <h3 className=\"\"> Wind Speed: {((data?.wind?.speed) )} m/s </h3> */}\n//          <h3> Wind: {data?.wind?.speed} m/s {getWindDirection(data?.wind?.deg)}</h3>\n//           <h3 className=\"\">Description: {data?.weather[0]?.description ?? 'N/A'} </h3>\n         \n//         </div>\n//       </div>\n//     }\n\n// {forecast.length > 0 && (\n//         <div className=\"col-md-12 text-center mt-5\">\n//           <h2>5-Day Forecast</h2>\n//           <div className=\"row\">\n//             {forecast.slice(0, 5).map((forecastItem, index) => (\n//               <div className=\"col-md-2\" key={index}>\n//                 <div className=\"shadow rounded weatherResultBox\">\n//                   <h6>{forecastItem?.dt_txt}</h6>\n//                   <p>\n//                     Temp:{\" \"}\n//                     {(forecastItem?.main?.temp - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>\n//                     Max Temp:{\" \"}\n//                     {(forecastItem?.main?.temp_max - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>\n//                     Min Temp:{\" \"}\n//                     {(forecastItem?.main?.temp_min - 273.15).toFixed(2)}°C\n//                   </p>\n//                   <p>Humidity: {forecastItem?.main?.humidity} %</p>\n//                   <p>\n//                     Wind: {forecastItem?.wind?.speed} m/s{\" \"}\n//                     {getWindDirection(forecastItem?.wind?.deg)}\n//                   </p>\n//                   <p>\n//                     Description: {forecastItem?.weather[0]?.description ?? \"N/A\"}\n//                   </p>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//   </div>\n\n//   );\n// }\n\n// export default App;\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}